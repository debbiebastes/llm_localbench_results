A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:

Option A is not relevant here, as DynamoDB Accelerator only improves performance for read-heavy workloads, and we are concerned with recording changes in another table.

Option B requires enabling Point-in-Time Recovery (PITR), which would create a copy of the entire table at a specific point in time, but this would not be efficient for our use case where we only want to record new changes.

Option D would require setting up DynamoDB Streams, which would continuously stream all data modifications to a Lambda function, but this would be overkill for our simple use case.

Option C is the most ideal solution here, as it allows us to set up an Amazon EventBridge rule that tracks table-level events in DynamoDB and triggers a Lambda function to process and save new changes to the other table. This approach is efficient, scalable, and easy to set up.