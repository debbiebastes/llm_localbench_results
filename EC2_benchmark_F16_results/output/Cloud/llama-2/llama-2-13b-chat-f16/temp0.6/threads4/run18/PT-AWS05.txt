A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:
Option C is the most ideal way to comply with the requirements because it allows for real-time processing of new changes made to items in DynamoDB, without the need for manual intervention or periodic syncs. By using Amazon EventBridge (formerly known as CloudWatch Events) and a Lambda function as a rule target, the system can automatically detect and process new changes in DynamoDB, and save them to the other table in another region. This approach also provides flexibility to handle large amounts of data and scale as needed.

Option A (Set up DynamoDB Accelerator) is not relevant to the requirements, as it only improves performance for read-heavy workloads. Option B (Enable DynamoDB Point-in-Time Recovery) is not necessary, as the goal is to record new changes in real-time, rather than recover from a previous state. Option D (Enable DynamoDB Streams) would also require manual intervention to process the streams and save the data to the other table, which goes against the requirement for real-time processing without manual intervention.