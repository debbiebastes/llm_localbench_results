A tech company has a CRM application hosted on an Auto Scaling group of On-Demand EC2 instances with different instance types and sizes. The application is extensively used during office hours from 9 in the morning to 5 in the afternoon. Their users are complaining that the performance of the application is slow during the start of the day but then works normally after a couple of hours.

Which of the following is the MOST operationally efficient solution to implement to ensure the application works properly at the beginning of the day?

(A) Configure a Predictive scaling policy for the Auto Scaling group to automatically adjust the number of Amazon EC2 instances
(B) Configure a Dynamic scaling policy for the Auto Scaling group to launch new instances based on the Memory utilization.
(C) Configure a Scheduled scaling policy for the Auto Scaling group to launch new instances before the start of the day.
(D) Configure a Dynamic scaling policy for the Auto Scaling group to launch new instances based on the CPU utilization.

Answer: 

Correct Answer: C) Configure a Scheduled scaling policy for the Auto Scaling group to launch new instances before the start of the day.

Explanation: A scheduled scaling policy will allow you to specify when you want the scaling to occur, in this case, before the start of the day. This will ensure that the application has enough resources to handle the increased traffic at the beginning of the day.

Predictive scaling policies (Option A) use machine learning algorithms to predict future usage and adjust the instance count accordingly. While this could potentially be a good solution, it might not work well in this scenario as the usage pattern is not predictable and is limited to a specific time frame.

Dynamic scaling based on memory utilization (Option B) may not be effective as the application's performance issues are likely caused by CPU usage and not memory usage.

Dynamic scaling based on CPU utilization (Option D) could potentially work, but it might lead to over-provisioning of instances during periods of low traffic.

Therefore, option C is the most operationally efficient solution in this scenario, as it allows you to scale resources before the start of the day when usage is expected to increase, ensuring that the application performs well during the busy period.