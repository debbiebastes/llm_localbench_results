A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:

Option (A) Setting up DynamoDB Accelerator is not necessary for this requirement, as it only helps with faster data retrieval and does not provide any functionality for syncing data between tables.

Option (B) Enabling DynamoDB Point-in-Time Recovery to automatically sync the two tables is not the most ideal solution, as it requires manual configuration and might not be able to keep up with the rate of new changes being made to the items in DynamoDB.

Option (D) Enabling DynamoDB Streams and configuring a Lambda function to process and save new changes to the other table is a good option, but it might require more resources and infrastructure setup compared to option (C).

Option (C) Creating an Amazon EventBridge rule that tracks table-level events in DynamoDB and sets a Lambda function as a rule target to process and save new changes to the other table provides a simple and efficient way to sync new changes between the two tables. This approach also allows for more flexibility in terms of customizing the sync logic and handling failures, as well as providing a centralized event-driven architecture for compliance monitoring.