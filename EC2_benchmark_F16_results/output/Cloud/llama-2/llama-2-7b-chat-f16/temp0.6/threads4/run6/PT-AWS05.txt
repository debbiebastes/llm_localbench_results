A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The MOST ideal way to comply with the requirements is option (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
Here's why:
Option (A), DynamoDB Accelerator, is not ideal because it only accelerates read and write operations for a single DynamoDB table, whereas you need to track changes made to multiple tables in different regions.
Option (B), DynamoDB Point-in-Time Recovery, is also not ideal because it is designed to recover data from a single table or region, not multiple tables or regions.
Option (D), DynamoDB Streams, can be used to track changes made to a DynamoDB table, but it does not provide an easy way to save the changes to another table in another region. You would need to write custom code to process the stream and save the changes to another table, which may add complexity and operational overhead.
Option (C) provides a simpler and more scalable solution by using Amazon EventBridge to track events in one DynamoDB table and triggering a Lambda function to process and save new changes to another table in another region. This approach can be easily scaled as the number of tables and regions grows.