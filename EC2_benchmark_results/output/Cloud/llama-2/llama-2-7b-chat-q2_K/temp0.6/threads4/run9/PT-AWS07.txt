A tech company has a CRM application hosted on an Auto Scaling group of On-Demand EC2 instances with different instance types and sizes. The application is extensively used during office hours from 9 in the morning to 5 in the afternoon. Their users are complaining that the performance of the application is slow during the start of the day but then works normally after a couple of hours.

Which of the following is the MOST operationally efficient solution to implement to ensure the application works properly at the beginning of the day?

(A) Configure a Predictive scaling policy for the Auto Scaling group to automatically adjust the number of Amazon EC2 instances
(B) Configure a Dynamic scaling policy for the Auto Scaling group to launch new instances based on the Memory utilization.
(C) Configure a Scheduled scaling policy for the Auto Scaling group to launch new instances before the start of the day.
(D) Configure a Dynamic scaling policy for the Auto Scaling group to launch new instances based on the CPU utilization.

Answer: 
The most operationally efficient solution is (C): Configure a Scheduled scaling policy for the Auto Scaling group to launch new instances before the start of the day. This will ensure that additional instances are launched and available for use by users at the start of the day, when the workload is typically highest. By launching instances ahead of time, you can help ensure that there are sufficient resources available to handle the increased demand during peak hours.
Option (A) Configure a Predictive scaling policy is not as efficient because it relies on predicting the future usage patterns of the application, which can be difficult to accurately forecast. Option (B) Configure a Dynamic scaling policy to launch new instances based on Memory utilization is also not as efficient because it does not take into account the overall workload on the instance and may result in instances being underutilized or overutilized. Option (D) Configure a Dynamic scaling policy to launch new instances based on CPU utilization is also not as efficient because it may result in instances being launched that are not fully utilized, leading to wasted resources.