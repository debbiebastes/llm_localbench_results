A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The most ideal way to comply with the requirements is option (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
Here's why:
EventBridge allows you to capture events from various sources, including DynamoDB, and route them to a Lambda function. By setting up an EventBridge rule that captures all table-level events in one region's DynamoDB table, you can ensure that any changes made to that table are immediately reflected in a second table in another region.
Option (D) is also a good choice, but it may require more setup and maintenance compared to Option (C). Enabling DynamoDB Streams and setting up a Lambda function to process and save new changes to the other table can be more complex to set up and maintain, especially if you have multiple tables to keep in sync across regions.
In contrast, using EventBridge is relatively straightforward, as it integrates well with AWS services like Lambda and CloudWatch. By setting up an EventBridge rule, you can ensure that any changes made to the source table are automatically reflected in the target table without needing to manually update the target table every time a change is made.