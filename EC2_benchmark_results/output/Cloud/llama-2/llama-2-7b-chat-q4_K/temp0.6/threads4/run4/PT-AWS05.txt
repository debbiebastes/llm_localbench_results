A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The most ideal way to comply with the requirements in this scenario is option (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB, and set a Lambda function as a rule target to process and save new changes to the other table.
Here's why:
Option (A) sets up DynamoDB Accelerator, which is not necessary for this use case. Option (B) enables DynamoDB Point-in-Time Recovery, but this feature only performs point-in-time backups of your data and does not automatically sync the two tables. Option (D) enables DynamoDB Streams, which streams all changes made to a DynamoDB table to an Amazon Kinesis stream, but it does not provide a simple way to save new changes to another table in another region.
By creating an Amazon EventBridge rule that tracks table-level events in DynamoDB, you can easily capture and process any changes made to the original table. You can then use a Lambda function as a rule target to save these changes to the other table in another region. This approach provides a more flexible and scalable solution compared to the other options.