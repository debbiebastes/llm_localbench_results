A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The MOST ideal way to comply with the requirements is (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
Here's why:
EventBridge is a fully managed service that makes it easy to detect changes in your AWS resources, including DynamoDB tables. By creating an EventBridge rule that tracks events on the original DynamoDB table, you can automatically capture new changes and forward them to another DynamoDB table in another region. This approach provides a scalable, durable, and highly available solution for recording and storing changes made to items in DynamoDB.
Option (A) DynamoDB Accelerator is not relevant to this scenario as it's designed to improve the performance of existing DynamoDB tables, rather than enable compliance with new requirements.
Option (B) Enable DynamoDB Point-in-Time Recovery is not a viable solution for recording and storing changes made to items in DynamoDB. While PITR can help recover data lost due to an outage or other disaster, it's not designed to capture changes made over time.
Option (D) Enable DynamoDB Streams is also not a viable solution for this scenario as it requires manual configuration of a Lambda function to process and save new changes to the other table. While DynamoDB Streams can provide real-time updates, it doesn't offer an easy way to capture and store changes made over time without manual intervention.