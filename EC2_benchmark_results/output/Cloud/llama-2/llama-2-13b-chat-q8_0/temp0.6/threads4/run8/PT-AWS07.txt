A tech company has a CRM application hosted on an Auto Scaling group of On-Demand EC2 instances with different instance types and sizes. The application is extensively used during office hours from 9 in the morning to 5 in the afternoon. Their users are complaining that the performance of the application is slow during the start of the day but then works normally after a couple of hours.

Which of the following is the MOST operationally efficient solution to implement to ensure the application works properly at the beginning of the day?

(A) Configure a Predictive scaling policy for the Auto Scaling group to automatically adjust the number of Amazon EC2 instances
(B) Configure a Dynamic scaling policy for the Auto Scaling group to launch new instances based on the Memory utilization.
(C) Configure a Scheduled scaling policy for the Auto Scaling group to launch new instances before the start of the day.
(D) Configure a Dynamic scaling policy for the Auto Scaling group to launch new instances based on the CPU utilization.

Answer: 

The best approach to ensure that the application works properly at the beginning of the day is to configure a Scheduled scaling policy (option C). This allows you to specify a scaling event schedule, which can be set to start at a specific time each day and launch new instances before the start of the day.

Predictive scaling (option A) may not be effective in this case as it relies on historical data to predict future usage, and the sudden spike in usage at the beginning of the day may not be captured by the prediction model. Dynamic scaling based on memory utilization (option B) or CPU utilization (option D) may also not be effective as the sudden increase in usage at the beginning of the day may cause a short-term spike in resource utilization, but not necessarily a sustained increase that would warrant additional instances.

Scheduled scaling, on the other hand, allows you to anticipate and prepare for the expected increase in usage at the beginning of the day by launching additional instances beforehand, ensuring that the application is able to handle the sudden spike in usage without any performance issues.