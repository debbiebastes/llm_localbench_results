A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
C. Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:

Option A, setting up DynamoDB Accelerator, is not relevant to this scenario as it only improves performance for read-heavy workloads and does not support writing data to another table.

Option B, enabling DynamoDB Point-in-Time Recovery, is not the most ideal way to comply with the requirements as it would require manual intervention and would not automatically sync the two tables in real-time.

Option D, enabling DynamoDB Streams, would also require manual intervention to set up and maintain the stream, and would not automatically save new changes to the other table. Additionally, DynamoDB Streams can be costly and may not be the most efficient solution for this use case.

Therefore, option C, creating an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB and sets a Lambda function as a rule target to process and save new changes to the other table, is the most ideal way to comply with the requirements. This approach allows for real-time syncing of new changes to the other table without manual intervention or additional infrastructure setup.