A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 

C. Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:

Option C is the most ideal way to comply with the requirements because it allows for real-time tracking of changes made to items in DynamoDB, without the need for periodic polling or explicit data synchronization. By creating an Amazon EventBridge rule that tracks table-level events in DynamoDB, new changes will be automatically detected and passed to a Lambda function as a trigger. The Lambda function can then process and save the new changes to the other DynamoDB table in another region. This approach is more efficient and scalable than the other options, which involve manual data synchronization or point-in-time recovery.

Option A (Set up DynamoDB Accelerator) is not relevant to this scenario as it only provides optimized read performance for applications that require low latency.

Option B (Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables) would require manual intervention and periodic data synchronization, which goes against the real-time requirements mentioned in the question.

Option D (Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table) is also not the most ideal solution as it requires manual configuration of Streams and a separate Lambda function for data processing, which can add complexity and overhead to the system.