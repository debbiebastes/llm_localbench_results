A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 

C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:

Option A is not applicable because DynamoDB Accelerator is only used for cache performance optimization, and does not provide a way to synchronize data between tables.

Option B is not ideal because it would require enabling Point-in-Time Recovery, which can be resource-intensive and may not be necessary for this use case.

Option D is not the most ideal approach because DynamoDB Streams are designed for real-time data processing, and may not be suitable for recording changes made to items in DynamoDB.

Option C provides a way to track table-level events in DynamoDB using Amazon EventBridge (formerly known as Amazon CloudWatch Events), which can be configured to trigger a Lambda function whenever new changes are made to the items in DynamoDB. This allows for real-time processing of new changes and ensures that all changes are recorded in the other table.