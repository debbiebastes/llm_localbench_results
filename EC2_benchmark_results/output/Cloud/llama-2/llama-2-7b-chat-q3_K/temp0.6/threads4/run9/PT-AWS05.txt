A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The most ideal way to comply with the requirements would be option (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB, and set a Lambda function as a rule target to process and save new changes to the other table.
Here's why:
Option (A), DynamoDB Accelerator, is not relevant to this scenario as it is designed for improving performance and reducing latency for read-heavy workloads, not for recording changes made to tables.
Option (B) does not address the need to store new changes in another table in another region. While Point-in-Time Recovery can replicate data across regions, it does not provide a way to record new changes made to tables.
Option (D) is also not ideal as DynamoDB Streams only provides real-time event processing for reads and writes, but does not provide a way to store the events in another table.
By using an Amazon EventBridge rule, you can track table-level events in DynamoDB and save them to a separate table in another region, which meets the requirements of the compliance request.