A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The MOST ideal way to comply with the requirements is (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
EventBridge allows you to set up event-driven automation between AWS services, including DynamoDB. By creating an EventBridge rule that listens for table-level events in DynamoDB, such as item updates or deletions, you can automatically trigger a Lambda function to process and save the changes to the other table in another region. This approach does not require any additional infrastructure or configuration beyond what is already present in your serverless application.
Option (A) sets up a separate DynamoDB accelerator, which is not necessary for this use case. Option (B) enables point-in-time recovery, which is a different feature that allows you to restore data from a specific point in time in the past. It does not provide the functionality of automatically syncing new changes to another table in another region.
Option (D) enables DynamoDB streams, which provides real-time tracking and monitoring of changes to items in DynamoDB. While this feature can be useful for certain scenarios, it is not necessary for simply recording and saving new changes to another table in another region.