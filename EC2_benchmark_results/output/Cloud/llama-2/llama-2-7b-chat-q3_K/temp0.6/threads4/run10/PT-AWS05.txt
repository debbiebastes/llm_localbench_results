A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The MOST ideal way to comply with the requirements is (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Here's why:

Option (A) DynamoDB Accelerator is not relevant to this scenario, as it is designed to improve the performance of read-heavy workloads on DynamoDB, but not for tracking changes to a different table in another region.
Option (B) Enable DynamoDB Point-in-Time Recovery does not provide the necessary functionality to record and store new changes made to an item in DynamoDB. It is designed to restore data from a point in time before a backup, but it does not track changes made after that point in time.
Option (D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table is also feasible, but it requires more setup and maintenance compared to option (C).
Option (C) creates an Amazon EventBridge rule that tracks table-level events in DynamoDB and sends those events to a Lambda function as a rule target. This allows for automated processing and saving of new changes to the other table in another region without requiring any additional setup or maintenance.