A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 

The best way to comply with the requirements is option C: Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Here's why:

Option A, DynamoDB Accelerator, is not relevant for this scenario as it only improves the performance of DynamoDB read and write operations and does not provide any features that would help with recording new changes in another table.

Option B, Point-in-Time Recovery, is a feature that allows you to restore DynamoDB tables to a previous state at a specific point in time. While this could be useful for recovery purposes, it would not automatically sync the two tables as required by the scenario.

Option D, DynamoDB Streams, provides real-time data streaming from DynamoDB and could be used to capture new changes in one table and write them to another table. However, it requires more setup and configuration compared to option C, which is a simpler and more straightforward solution.

Option C allows you to create an EventBridge rule that tracks table-level events in DynamoDB, such as inserts, updates, and deletes. You can then set a Lambda function as a rule target to process and save new changes to the other table. This approach is more efficient and easier to implement than option D, which requires more resources and configuration.

Therefore, option C is the most ideal way to comply with the requirements in this scenario.