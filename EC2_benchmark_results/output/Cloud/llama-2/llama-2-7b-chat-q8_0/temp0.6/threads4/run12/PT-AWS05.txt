A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
The MOST ideal way to comply with the requirements is option (C): Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
Using EventBridge allows you to automatically capture events from DynamoDB, such as insert, update, and delete operations, and then trigger a Lambda function to process those events and save them to another table in another region. This approach provides a scalable, secure, and auditable solution for recording and storing changes made to items in DynamoDB.
Option (A) DynamoDB Accelerator is not relevant to this scenario as it is intended for improving the performance of small-scale DynamoDB tables, rather than capturing events from those tables.
Option (B) Enable DynamoDB Point-in-Time Recovery is a backup and restore feature that allows you to restore your DynamoDB table to a specific point in time in case of data loss or corruption. It does not provide the necessary functionality for recording and storing changes made to items in DynamoDB.
Option (D) Enable DynamoDB Streams is similar to option (C), but it provides more granular control over the events that you want to capture, as well as more fine-grained control over how those events are processed. However, using EventBridge provides a more straightforward and simpler solution for this scenario.