A serverless application composed of Lambda, API Gateway, and DynamoDB has been running without issues for quite some time. As part of the IT compliance of the company, a developer was instructed to ensure that all of the new changes made to the items in DynamoDB are recorded and stored in another DynamoDB table in another region.

In this scenario, which of the following is the MOST ideal way to comply with the requirements?

(A) Set up DynamoDB Accelerator
(B) Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables.
(C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.
(D) Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table.

Answer: 
C) Create an Amazon EventBridge (Amazon CloudWatch Events) rule that tracks table-level events in DynamoDB. Set a Lambda function as a rule target to process and save new changes to the other table.

Explanation:

Option C is the most ideal way to comply with the requirements because it allows you to track changes made to items in DynamoDB and automatically save those changes to another table. With Amazon EventBridge (Amazon CloudWatch Events), you can set up a rule that triggers when new items are added, updated, or deleted in DynamoDB. The triggered Lambda function can then process and save the new changes to the other table.

Option A, DynamoDB Accelerator, is not relevant to this requirement as it only speeds up data access for existing workloads and does not provide real-time data replication or synchronization.

Option B, Enable DynamoDB Point-in-Time Recovery to automatically sync the two tables, may not be the most efficient solution as it requires manual intervention to set up and maintain the point-in-time recovery settings, and it also requires more resources and infrastructure to store the backup data.

Option D, Enable DynamoDB Streams and configure a Lambda function to process and save new changes to the other table, is also a valid solution but may require more resources and infrastructure to handle the streaming data. Additionally, it may not be as flexible as option C as it requires the Lambda function to be constantly running and processing the streamed data.